#!/usr/bin/env python3
"""
Test para diagnosticar los errores 500 en los endpoints
Ejecutar en una consola separada mientras el servidor est√° corriendo
"""

import sys
import os
import requests
import json
import traceback

# Agregar el directorio backend al path
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))

def test_endpoint(url, method='GET', data=None):
    """Test un endpoint espec√≠fico y muestra informaci√≥n detallada"""
    print(f"\n{'='*50}")
    print(f"Testing {method} {url}")
    print(f"{'='*50}")
    
    try:
        if method == 'GET':
            response = requests.get(url, timeout=10)
        elif method == 'POST':
            response = requests.post(url, json=data, timeout=10)
        
        print(f"Status Code: {response.status_code}")
        print(f"Headers: {dict(response.headers)}")
        
        try:
            response_json = response.json()
            print(f"Response JSON:")
            print(json.dumps(response_json, indent=2, ensure_ascii=False))
        except:
            print(f"Response Text: {response.text}")
            
        return response.status_code == 200
        
    except requests.exceptions.ConnectionError:
        print("‚ùå Error: No se pudo conectar al servidor")
        print("   Aseg√∫rate de que el backend est√© corriendo en http://localhost:8000")
        return False
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")
        traceback.print_exc()
        return False

def test_file_processing():
    """Test directo del procesamiento de archivos sin usar el servidor"""
    print(f"\n{'='*50}")
    print("Testing file processing directly")
    print(f"{'='*50}")
    
    try:
        from utils.leer_excel import procesar_archivo_excel
        from utils.categorizar import aplicar_categorizacion
        from utils.fechas import agregar_columnas_tiempo
        from utils.agregaciones import calcular_todas_agregaciones
        
        # Buscar archivos TEF
        load_excels_path = os.path.join('backend', 'data', 'load_excels')
        print(f"Buscando archivos en: {os.path.abspath(load_excels_path)}")
        
        if not os.path.exists(load_excels_path):
            print(f"‚ùå Directorio no existe: {load_excels_path}")
            return False
            
        archivos = [f for f in os.listdir(load_excels_path) if f.endswith(('.xlsx', '.xls'))]
        print(f"Archivos encontrados: {archivos}")
        
        if not archivos:
            print("‚ùå No se encontraron archivos Excel")
            return False
            
        # Probar con el primer archivo
        archivo_test = os.path.join(load_excels_path, archivos[0])
        print(f"\nProcesando: {archivo_test}")
        
        # 1. Procesar archivo
        print("1. Procesando archivo Excel...")
        df = procesar_archivo_excel(archivo_test)
        print(f"   ‚úÖ Filas procesadas: {len(df)}")
        print(f"   ‚úÖ Columnas: {list(df.columns)}")
        
        # 2. Aplicar categorizaci√≥n
        print("2. Aplicando categorizaci√≥n...")
        df = aplicar_categorizacion(df)
        print(f"   ‚úÖ Categor√≠as: {df['categoria'].unique()}")
        
        # 3. Agregar columnas de tiempo
        print("3. Agregando columnas de tiempo...")
        df = agregar_columnas_tiempo(df)
        print(f"   ‚úÖ Nuevas columnas de fecha agregadas")
        
        # 4. Calcular agregaciones
        print("4. Calculando agregaciones...")
        agregaciones = calcular_todas_agregaciones(df)
        print(f"   ‚úÖ Agregaciones calculadas: {list(agregaciones.keys())}")
        
        print("\n‚úÖ Procesamiento directo de archivos EXITOSO")
        return True
        
    except Exception as e:
        print(f"‚ùå Error en procesamiento directo: {e}")
        traceback.print_exc()
        return False

def test_database_connection():
    """Test la conexi√≥n a la base de datos"""
    print(f"\n{'='*50}")
    print("Testing database connection")
    print(f"{'='*50}")
    
    try:
        from utils.bd import DatabaseManager
        
        db_manager = DatabaseManager()
        print("‚úÖ DatabaseManager creado exitosamente")
        
        # Test b√°sico de la BD
        count = db_manager.contar_transacciones()
        print(f"‚úÖ Transacciones en BD: {count}")
        
        db_manager.cerrar_conexion()
        print("‚úÖ Conexi√≥n cerrada exitosamente")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en base de datos: {e}")
        traceback.print_exc()
        return False

def main():
    """Ejecutar todos los tests de diagn√≥stico"""
    print("üîç DIAGN√ìSTICO DE ERRORES DEL DASHBOARD FINANCIERO")
    print("=" * 60)
    
    # Test 1: Verificar conexi√≥n al servidor
    server_ok = test_endpoint("http://localhost:8000/")
    
    if not server_ok:
        print("\n‚ö†Ô∏è El servidor no est√° respondiendo. Iniciando tests offline...")
    
    # Test 2: Verificar endpoint de stats
    if server_ok:
        test_endpoint("http://localhost:8000/stats/")
    
    # Test 3: Test directo de procesamiento de archivos
    processing_ok = test_file_processing()
    
    # Test 4: Test de base de datos
    db_ok = test_database_connection()
    
    # Test 5: Test de endpoints problem√°ticos (solo si el servidor est√° ok)
    if server_ok:
        print("\nüîç Testing endpoints problem√°ticos...")
        test_endpoint("http://localhost:8000/cargar-tef-locales/", method='POST')
        test_endpoint("http://localhost:8000/historial/")
    
    # Resumen
    print(f"\n{'='*60}")
    print("üìä RESUMEN DE DIAGN√ìSTICO")
    print(f"{'='*60}")
    print(f"üåê Servidor respondiendo: {'‚úÖ' if server_ok else '‚ùå'}")
    print(f"üìÅ Procesamiento de archivos: {'‚úÖ' if processing_ok else '‚ùå'}")
    print(f"üóÑÔ∏è Base de datos: {'‚úÖ' if db_ok else '‚ùå'}")
    
    if not processing_ok:
        print("\nüí° RECOMENDACIONES:")
        print("   - Verificar que los archivos Excel existan en backend/data/load_excels/")
        print("   - Verificar que las dependencias est√©n instaladas: pip install -r requirements.txt")
        print("   - Revisar el formato de los archivos Excel")
        
    if server_ok and not db_ok:
        print("\nüí° Problema con base de datos detectado - verificar SQLAlchemy")

if __name__ == "__main__":
    main()
